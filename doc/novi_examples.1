.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "NOVI_EXAMPLES.1 1"
.TH NOVI_EXAMPLES.1 1 "2005-07-17" "perl v5.8.6" "User Contributed Perl Documentation"
.SH "NAME"
\&\fBnovi\fR sample usage
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Sample scenarios for using novi
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Sh "Example: show the latest RPMs in a single source directory"
.IX Subsection "Example: show the latest RPMs in a single source directory"
You have a directory with the all of the RPMs for a given release.  (That
is, orignal RPMs plus the updates.)  You want to see what's the latest
version of each product therein.
.PP
.Vb 1
\&   $ novi -a list /some/dir/RPMS
.Ve
.PP
The output isn't much to look at.  That will change in the future.  The
\&\*(L"list\*(R" option started off as a debugging tool.
.PP
Since \*(L"list\*(R" is the default action, you could shorten this commandline to:
.PP
.Vb 1
\&   $ novi /some/dir/RPMS
.Ve
.PP
The program already looks for files of the pattern \*(L"*.rpm\*(R" so you don't
have to specify this on the commandline.
.PP
Note that the search for \s-1RPM\s0 files is \s-1NOT\s0 recursive; the files must exist
just beneath the specified source directory.
.Sh "Example: show the latest RPMs in a set of source directories"
.IX Subsection "Example: show the latest RPMs in a set of source directories"
Your RPMs are separated into different directories \*(-- \s-1OS\s0, updates,
third\-party, and so on.  You want to see the latest version of each
product.
.PP
.Vb 1
\&   $ novi /dir1/RPMS /dir2/RPMS /dir3/RPMS [...] /dirN/RPMS
.Ve
.PP
There's no hard limit on the number of RPMs novi can handle.  The only
limit should be your system's available memory for the objects, and any
upper limits on your \*(C+ implementation's \s-1STL\s0 containers.
.Sh "Example: hardlink the latest RPMs to another directory"
.IX Subsection "Example: hardlink the latest RPMs to another directory"
You want to find the latest-version RPMs in a series of directories, and
hard-link them to another location (e.g. the base of a new Kickstart tree).
.PP
.Vb 1
\&   $ novi -a hardlink -t /target/dir /dir1/RPMS [...] /dirN/RPMS
.Ve
.PP
As a reminder, the hard-link only works if \fBall\fR of these directories are
on the same filesystem.
.Sh "Example: copy the latest RPMs to another directory"
.IX Subsection "Example: copy the latest RPMs to another directory"
This feature isn't yet implemented.  Expect it in an upcoming release, if
enough people really ask for it.
.PP
Given the significant I/O activity, though, would you really want to copy
the RPMs to the target directory?  (A single Fedora release can have a
couple of gigabytes in RPMs.)  By comparison, a hard-link isn't quite so
I/O\-intensive: it just requires another file pointer in the inode table,
which doesn't require reading/writing the file itself.
.Sh "Example: load RPMs from a repo metadata file"
.IX Subsection "Example: load RPMs from a repo metadata file"
Some repos \*(-- such as the base \s-1OS\s0 install media \*(-- never change.  You can
run \fBcreaterepo\fR on those directories to generate repository metadata.
In turn, novi can load \s-1RPM\s0 header info out of the repo metadata files instead
of parsing each \s-1RPM\s0 individually.  This results in significant performance
gains because of the reduced I/O.
.PP
.Vb 1
\&        $ novi -a list repo:/some/dir /some/other/dir
.Ve
.PP
In the above example, novi will load \s-1RPM\s0 header info from the file
.PP
.Vb 1
\&        /some/dir/repodata/primary.xml.gz
.Ve
.PP
(It will also read RPMs from /some/other/dir.  This demonstrates that you
can mix and match directory and repo sources.)
.SH "AUTHOR"
.IX Header "AUTHOR"
Ethan McCallum
.SH "WEBSITE"
.IX Header "WEBSITE"
\&\fBhttp://www.ExMachinaTech.net/\fR
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
refer to the \fInovi\fR\|(1) manpage
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fInovi\fR\|(1)
.PP
The \fBRepository Metadata Project\fR at 
http://linux.duke.edu/projects/metadata/
explains the repo metadata format.
.SH "BUGS"
.IX Header "BUGS"
refer to the \fInovi\fR\|(1) manpage, and/or the novi website at
\&\fBhttp://www.ExMachinaTech.net/\fR
